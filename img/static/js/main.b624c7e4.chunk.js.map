{"version":3,"sources":["components/single-image-component/SingleImage.js","services/ImageService.js","components/selectable-icons-component/SelectableIcons.js","components/layout-component/Layout.js","components/choose-favorites-collection-component/ChooseFaveCollection.js","services/UserService.js","components/create-favorites-collection-component/CreateFaveCollection.js","components/fave-selection-container-component/FaveSelectionContainer.js","components/navigation-component/Navigation.js","components/main-container-component/Main.js","App.js","serviceWorker.js","index.js"],"names":["SingleImage","props","src","source","url","alt","apiBaseUrl","ImageService","getAllImages","a","fetch","mode","response","json","getFaveCollections","addToFaveImages","collectionName","imageId","imageUrl","accountNum","requestOptions","method","headers","body","JSON","stringify","name","_id","account","removeFromFaveImages","SelectableImage","useState","isFavorited","setIsFavorited","useEffect","faveImageData","images","faveImageCheck","map","image","indexOf","showColumn","Fragment","className","onClick","event","stopPropagation","updateFaves","Layout","isFaveCollection","allImageData","imageRef","setImageRef","setShowColumn","scrollIntoView","behavior","block","isLoaded","length","index","selectedImageRef","React","createRef","id","key","ref","current","withRouter","nameValue","setNameValue","goToFaves","history","push","signInClick","onSubmit","preventDefault","loadFaveCollection","onChange","target","value","faveImageCollections","collection","type","displayCreateCollectionComp","UserService","addCollection","Math","floor","random","getCollection","submissionSuccess","setSubmissionSuccess","useCallback","updateFaveCollectionsList","e","console","log","createNewClick","then","result","Boolean","htmlFor","FaveSelectionContainer","showCreateCollectionComp","setShowCreateCollectionComp","passedValue","Navigation","showMenu","setShowMenu","to","exact","path","component","render","Main","setCollectionName","setFaveImageData","setIsLoaded","setFaveImageCollections","setAllImageData","getFaves","App","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b624c7e4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SingleImage = (props) => {\n  return (\n    <div>\n      <img src={props.source.url} alt={props.source.alt}></img>\n    </div>\n  );\n};\n\nexport default SingleImage;\n","// const apiBaseUrl = 'http://localhost:3001/img'; // dev\nconst apiBaseUrl = 'https://meme-server2.herokuapp.com/img'; // prod\n\nconst ImageService = {\n\n    // Get all images\n    getAllImages: async function() {\n        const response = await fetch(apiBaseUrl, {mode: 'cors'});\n        const json = await response.json();\n        return json;\n    },\n\n    // Get fave image collections\n    getFaveCollections: async function() {\n        const response = await fetch(apiBaseUrl+'/favoriteCollectionsList', {mode: 'cors'});\n        const json = await response.json();\n        return json;\n    },\n\n    addToFaveImages: async function(collectionName, imageId, imageUrl, accountNum) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId,\n                url: imageUrl,\n                account: accountNum,\n                alt: ''\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/addToFavoritesCollection', requestOptions)\n        const json = await response.json();\n        return json;\n    },\n\n    removeFromFaveImages: async function(collectionName, imageId) {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/removeFromFavoritesCollection/' + collectionName + '/' + imageId, requestOptions)\n        const json = await response.json();\n        return json;\n    }\n}\n\nexport default ImageService\n","import React, { useState, useEffect } from \"react\";\n\nimport SingleImage from \"../single-image-component/SingleImage\";\nimport \"./SelectableIcons.css\";\nimport ImageService from \"../../services/ImageService\";\n\nconst SelectableImage = (props) => {\n  const [isFavorited, setIsFavorited] = useState(false);\n\n  const toggleClass = (event) => {\n    const currentState = isFavorited;\n    setIsFavorited(!currentState);\n    if (isFavorited !== true) {\n      ImageService.addToFaveImages(\n        props.collectionName,\n        props.source._id,\n        props.source.url,\n        props.source.account\n      );\n      if (props.showColumn) {\n        event.stopPropagation();\n      } else {\n        props.updateFaves();\n      }\n    } else {\n      ImageService.removeFromFaveImages(props.collectionName, props.source._id);\n      if (props.showColumn) {\n        event.stopPropagation();\n      } else {\n        props.updateFaves();\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (props.faveImageData.images) {\n      const faveImageCheck =\n        props.faveImageData.images\n          .map(function (image) {\n            return image._id;\n          })\n          .indexOf(props.source._id) !== -1;\n      setIsFavorited(faveImageCheck);\n    }\n  }, [props.faveImageData, props.source._id]);\n\n  if (props.collectionName && props.showColumn) {\n    return (\n        <React.Fragment>\n          <SingleImage source={props.source} />\n          <i\n            className={isFavorited === true ? \"fas fa-heart\" : \"far fa-heart\"}\n            onClick={toggleClass}\n          ></i>\n        </React.Fragment>\n    )\n  } else {\n    return ( <SingleImage source={props.source} /> )\n  }\n};\n\nexport default SelectableImage;\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./Layout.css\";\nimport SelectableIcons from \"../selectable-icons-component/SelectableIcons\";\n\nconst Layout = (props) => {\n  let images = props.isFaveCollection\n    ? props.faveImageData.images\n    : props.allImageData;\n\n  const [imageRef, setImageRef] = useState();\n  let [showColumn, setShowColumn] = useState(false);\n\n  const displayColumn = () => {\n    setShowColumn(showColumn = !showColumn);\n\n    if (props.collectionName && showColumn === false) {\n      // if transitioning from column (on faves page), \n      // make call to get updated faves list to display in grid\n      props.updateFaves();\n    }\n  };\n\n  useEffect(() => {\n    if (imageRef && typeof imageRef.scrollIntoView === \"function\") {\n      imageRef.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n      });\n    }\n  }, [imageRef]);\n\n  return (\n    <React.Fragment>\n      {!props.isLoaded && <div>Loading... {props.isLoaded}</div>}\n      {props.isFaveCollection && props.faveImageData.length === 0 && (\n        <div>No favorite images. Make selections to see them here.</div>\n      )}\n      <div className={showColumn ? \"column\" : \"grid\"}>\n        <ul>\n          {images.map((image, index) => {\n            const selectedImageRef = React.createRef();\n            return (\n              <li\n                id={index}\n                key={index}\n                ref={selectedImageRef}\n                onClick={() => {\n                  displayColumn();\n                  setImageRef(selectedImageRef.current);\n                }}\n              >\n                <SelectableIcons\n                  source={{...image, account: props.faveImageData.account}}\n                  faveImageData={props.faveImageData}\n                  collectionName={props.collectionName}\n                  updateFaves={props.updateFaves}\n                  showColumn={showColumn}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Layout;\n","import React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ChooseFave = (props) => {\n  const [nameValue, setNameValue] = useState(\"\");\n\n  const handleChange = (event) => {\n    if (event.target.name !== \"Select a folder\") {\n      setNameValue(event.target.value);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (nameValue !== \"\" && nameValue !== \"Select a folder\") {\n      props.loadFaveCollection(nameValue);\n      goToFaves();\n    }\n  };\n\n  // If account selection is successful, go to favorites\n  const goToFaves = () => {\n    props.history.push(\"/img/favorites\");\n  };\n\n  if (props.signInClick) {\n    return (\n      <div className=\"choose-fave form\">\n        <h3>Choose a favorites collection</h3>\n        <form onSubmit={handleSubmit}>\n          <select onChange={handleChange}>\n            {props.faveImageCollections.map((collection, key) => {\n              return (\n                <option key={key} value={collection.name}>\n                  {collection.name}\n                </option>\n              );\n            })}\n          </select>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  } else {\n    return (\n      <input\n        type=\"submit\"\n        value=\"Choose One\"\n        onClick={() => {\n          props.displayCreateCollectionComp(false);\n        }}\n      ></input>\n    );\n  }\n};\n\nexport default withRouter(ChooseFave);\n","// const apiBaseUrl = 'http://localhost:3001/img'; // dev\nconst apiBaseUrl = 'https://meme-server2.herokuapp.com/img'; // prod\n\nconst UserService = {\n\n    addCollection: async function(collectionName) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                account: Math.floor(100000 + Math.random() * 900000)\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/addCollection', requestOptions)\n        const json = await response.json();\n        return json;\n    },\n\n    getCollection: async function(name) {\n        const response = await fetch(apiBaseUrl + '/favorites/' + name)\n        const json = await response.json();\n        return json;\n    }\n}\n\nexport default UserService\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport UserService from '../../services/UserService';\n\nconst CreateFave = (props) => {\n\n    const [nameValue, setNameValue] = useState('');\n    const [submissionSuccess, setSubmissionSuccess] = useState('');\n\n    const handleChange = (event) => {\n        if (event.target.name === 'name') {\n            setNameValue(event.target.value);\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        UserService.addCollection(nameValue)\n            .then(result => { setSubmissionSuccess(Boolean(result) ) }) ;\n    }\n\n    // If new account creation is successful, go back home\n    const goToFaves = useCallback(() => {\n        props.history.push(\"/img\")\n    }, [props]);\n\n    // Called after state change (see the handleSubmit setState call above)\n    useEffect(() => {\n        try {\n            if (submissionSuccess) {\n                props.loadFaveCollection(nameValue);\n                props.updateFaveCollectionsList();\n                goToFaves();\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }, [submissionSuccess, nameValue, props, goToFaves]);\n    // }, []);\n\n    if ( props.createNewClick ) {\n        return (\n            <div className=\"create-fave form\">\n                <h3>Create a new favorites folder</h3>\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"name\">Add a name:\n                        <input type=\"text\" name=\"name\" onChange={handleChange}/>\n                    </label>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n            </div>\n        )\n    } else {\n        return (\n            <input type=\"submit\" value=\"Create New\" onClick={() => {props.displayCreateCollectionComp(true)}}></input>\n        )\n    }\n}\n\nexport default withRouter(CreateFave)\n","import React, { useState, useEffect } from \"react\";\n\nimport ChooseFave from \"../choose-favorites-collection-component/ChooseFaveCollection\";\nimport CreateFave from \"../create-favorites-collection-component/CreateFaveCollection\";\nimport \"./FaveSelectionContainer.css\";\n\nconst FaveSelectionContainer = (props) => {\n  const [showCreateCollectionComp, setShowCreateCollectionComp] = useState(\n    false\n  );\n\n  /*\n   * Gets event passed back up from child components.\n   * This call comes from navigation.\n   */\n  const displayCreateCollectionComp = (passedValue) => {\n    setShowCreateCollectionComp(passedValue);\n  };\n\n  /*\n   * Gets called after render.\n   */\n  useEffect(() => {\n    setShowCreateCollectionComp(props.createNewClick);\n  }, [props.createNewClick]);\n\n  const {\n    faveImageCollections,\n    loadFaveCollection,\n    updateFaveCollectionsList,\n  } = props;\n\n  if (showCreateCollectionComp) {\n    return (\n      <React.Fragment>\n        <div className=\"fave-selection-container\">\n          <ChooseFave\n            signInClick={false}\n            faveImageCollections={faveImageCollections}\n            displayCreateCollectionComp={displayCreateCollectionComp}\n          ></ChooseFave>\n          <CreateFave\n            createNewClick={true}\n            loadFaveCollection={loadFaveCollection}\n            updateFaveCollectionsList={updateFaveCollectionsList}\n          ></CreateFave>\n        </div>\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <div className=\"fave-selection-container\">\n          <CreateFave\n            createNewClick={false}\n            displayCreateCollectionComp={displayCreateCollectionComp}\n          ></CreateFave>\n          <ChooseFave\n            signInClick={true}\n            faveImageCollections={faveImageCollections}\n            loadFaveCollection={loadFaveCollection}\n          ></ChooseFave>\n        </div>\n      </React.Fragment>\n    );\n  }\n};\n\nexport default FaveSelectionContainer;\n","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nimport Layout from \"../layout-component/Layout\";\nimport FaveSelectionContainer from \"../fave-selection-container-component/FaveSelectionContainer\";\nimport \"./Navigation.css\";\n\nconst Navigation = (props) => {\n  const [showMenu, setShowMenu] = useState(false);\n\n  const allMemes = \"All Memes\";\n  const startCollection = \"Start a Collection\";\n  const chooseCollection = \"Choose a Collection\";\n  const faveMemes = \"Fave Memes\";\n\n  let isFaveCollection = true;\n\n  const displayMenu = () => {\n    setShowMenu(!showMenu);\n  };\n\n  return (\n    <Router>\n      <div\n        className=\"navigation\"\n        onClick={() => {\n          displayMenu();\n        }}\n      >\n        <h1>img</h1>\n        <ul className={showMenu ? \"show\" : \"hide\"}>\n          <li>\n            <Link\n              to=\"/img\"\n              onClick={() => {\n                props.updateFaves();\n              }}\n            >\n              {allMemes}\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/img/create-faves\">{startCollection}</Link>\n          </li>\n          <li>\n            <Link to=\"/img/view-faves\">{chooseCollection}</Link>\n          </li>\n          {props.collectionName !== \"\" && (\n            <li>\n              <Link\n                to=\"/img/favorites\"\n                onClick={() => {\n                  props.updateFaves();\n                }}\n              >\n                {faveMemes}\n              </Link>\n            </li>\n          )}\n        </ul>\n        <button>\n          <span>|</span>\n          <span>|</span>\n          <span>|</span>\n        </button>\n      </div>\n\n      <Switch>\n        <Route\n          exact\n          path=\"/img\"\n          component={() => (\n            <Layout\n              allImageData={props.allImageData}\n              faveImageData={props.faveImageData}\n              isLoaded={props.isLoaded}\n              isFaveCollection={!isFaveCollection}\n              collectionName={props.collectionName}\n              updateFaves={props.updateFaves}\n            />\n          )}\n        />\n        <Route\n          path=\"/img/create-faves\"\n          render={() => {\n            return props.isLoaded ? (\n              <FaveSelectionContainer\n                faveImageCollections={props.faveImageCollections}\n                createNewClick={props.createNewClick}\n                loadFaveCollection={props.loadFaveCollection}\n                updateFaveCollectionsList={props.updateFaveCollectionsList}\n              />\n            ) : (\n              <Redirect to=\"/img\" />\n            );\n          }}\n        />\n        <Route\n          path=\"/img/view-faves\"\n          component={() => (\n            <FaveSelectionContainer\n              faveImageCollections={props.faveImageCollections}\n              loadFaveCollection={props.loadFaveCollection}\n              updateFaveCollectionsList={props.updateFaveCollectionsList}\n            />\n          )}\n        />\n        <Route\n          path=\"/img/favorites\"\n          component={() => (\n            <Layout\n              faveImageData={props.faveImageData}\n              isLoaded={props.isLoaded}\n              isFaveCollection={isFaveCollection}\n              collectionName={props.collectionName}\n              updateFaves={props.updateFaves}\n            />\n          )}\n        />\n        {/* <Route component={NoMatch} /> */}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Navigation;\n","import React, { useState, useEffect } from \"react\";\n\nimport Navigation from \"../navigation-component/Navigation\";\nimport UserService from \"../../services/UserService\";\nimport ImageService from \"../../services/ImageService\";\n\nconst Main = () => {\n  const [collectionName, setCollectionName] = useState(\"\");\n  const [faveImageData, setFaveImageData] = useState({images: [], account: null});\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [faveImageCollections, setFaveImageCollections] = useState([]);\n  const [allImageData, setAllImageData] = useState([]);\n  const createNewClick = true;\n\n  const updateFaves = () => {\n    getFaves(collectionName);\n  };\n\n  const loadFaveCollection = (collection) => {\n    setCollectionName(collection);\n    getFaves(collection);\n  };\n\n  const getFaves = (collection) => {\n    UserService.getCollection(collection).then((result) => {\n      if (result[0]) {\n        setFaveImageData({\n          images: result[0].images,\n          account: result[0].account\n        });\n      }\n    });\n  };\n\n  const updateFaveCollectionsList = () => {\n    ImageService.getFaveCollections().then(\n      (result) => setFaveImageCollections(result),\n      setIsLoaded(true)\n    );\n  };\n\n  useEffect(() => {\n    // Get all images\n    ImageService.getAllImages().then((result) => {\n      setAllImageData(result);\n    });\n\n    // Get fave image collections\n    updateFaveCollectionsList();\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <Navigation\n        allImageData={allImageData}\n        faveImageData={faveImageData}\n        faveImageCollections={faveImageCollections}\n        isLoaded={isLoaded}\n        // isFaveCollection={isFaveCollection}\n        createNewClick={createNewClick}\n        collectionName={collectionName}\n        loadFaveCollection={loadFaveCollection}\n        updateFaves={updateFaves}\n        updateFaveCollectionsList={updateFaveCollectionsList}\n      />\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport Main from './components/main-container-component/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}