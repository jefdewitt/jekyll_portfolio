{"version":3,"sources":["components/single-image-component/SingleImage.js","services/ImageService.js","components/selectable-icons-component/SelectableIcons.js","components/layout-component/Layout.js","components/choose-favorites-collection-component/ChooseFaveCollection.js","services/UserService.js","components/create-favorites-collection-component/CreateFaveCollection.js","components/fave-selection-container-component/FaveSelectionContainer.js","components/navigation-component/Navigation.js","components/main-container-component/Main.js","App.js","serviceWorker.js","index.js"],"names":["SingleImage","props","src","source","url","alt","apiBaseUrl","ImageService","getAllImages","a","fetch","mode","response","json","getFaveCollections","addToFaveImages","collectionName","imageId","imageUrl","requestOptions","method","headers","body","JSON","stringify","name","_id","removeFromFaveImages","SelectableImage","toggleClass","event","currentState","state","favorited","setState","showColumn","stopPropagation","updateFaves","this","faveImageData","faveImageCheck","map","image","indexOf","Fragment","className","onClick","Component","Layout","ref","item","newRef","current","scrollIntoView","behavior","block","images","isFaveCollection","allImageData","isLoaded","index","React","createRef","id","key","displayColumn","scrollToImage","ChooseFave","handleChange","target","nameValue","value","handleSubmit","preventDefault","loadFaveCollection","goToFaves","submissionSuccess","history","push","signInClick","onSubmit","onChange","faveImageCollections","collection","type","displayCreateCollectionComp","withRouter","UserService","addCollection","account","Math","floor","random","getCollection","CreateFave","then","result","Boolean","updateFaveCollectionsList","e","console","log","createNewClick","htmlFor","FaveSelectionContainer","passedValue","showCreateCollectionComp","componentDidMount","Navigation","displayMenu","showMenu","showFaves","to","exact","path","component","render","Main","getFaves","hasFaves","App","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd2cad55.chunk.js","sourcesContent":["import React from 'react';\n\nconst SingleImage = (props) => {\n\n    return (\n        <div>\n            <img src={props.source.url} alt={props.source.alt}></img>\n        </div>\n    );\n}\n\nexport default SingleImage\n","// const apiBaseUrl = 'http://localhost:3001/img'; // dev\nconst apiBaseUrl = 'https://meme-server2.herokuapp.com/img'; // prod\n\nconst ImageService = {\n\n    // Get all images\n    getAllImages: async function() {\n        const response = await fetch(apiBaseUrl, {mode: 'cors'});\n        const json = await response.json();\n        return json;\n    },\n\n     // Get fave image collections\n    getFaveCollections: async function() {\n        const response = await fetch(apiBaseUrl+'/favoriteCollectionsList', {mode: 'cors'});\n        const json = await response.json();\n        return json;\n    },\n\n    addToFaveImages: async function(collectionName, imageId, imageUrl) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId,\n                url: imageUrl,\n                alt: ''\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/addToFavoritesCollection', requestOptions)\n        const json = await response.json();\n        return json;\n    },\n\n    removeFromFaveImages: async function(collectionName, imageId) {\n        const requestOptions = {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/removeFromFavoritesCollection/' + collectionName + '/' + imageId, requestOptions)\n        const json = await response.json();\n        return json;\n    }\n}\n\nexport default ImageService\n","import React, { Component } from 'react';\n\nimport SingleImage from '../single-image-component/SingleImage';\nimport './SelectableIcons.css';\nimport ImageService from '../../services/ImageService';\n\nclass SelectableImage extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            favorited: false\n        };\n    }\n\n    toggleClass = (event) => {\n        const currentState = this.state.favorited;\n        this.setState({ favorited: !currentState });\n        if (this.state.favorited !== true) {\n            ImageService.addToFaveImages(this.props.collectionName, this.props.source._id, this.props.source.url);\n            if (this.props.showColumn) {\n                event.stopPropagation();\n            } else {\n                this.props.updateFaves();\n            }\n        } else {\n            ImageService.removeFromFaveImages(this.props.collectionName, this.props.source._id);\n            if (this.props.showColumn) {\n                event.stopPropagation();\n            } else {\n                this.props.updateFaves();\n            }\n        }\n    };\n\n    componentDidMount() {\n        if (this.props.faveImageData) {\n            const faveImageCheck = (this.props.faveImageData.map(function(image) {\n                return image._id;\n            }).indexOf(this.props.source._id) !== -1);\n            this.setState({\n                favorited: faveImageCheck\n            })\n        }\n    }\n\n    render() {\n\n        if (this.props.collectionName && this.props.showColumn) {\n            return (\n                <React.Fragment>\n                    <SingleImage source={this.props.source}/>\n                    <i className={ (this.state.favorited === true) ? 'fas fa-heart' : 'far fa-heart' }\n                    onClick={ this.toggleClass }></i>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <SingleImage source={this.props.source}/>\n                </React.Fragment>\n            )\n        }\n    }\n}\n\nexport default SelectableImage\n","import React, { Component } from 'react';\n\nimport './Layout.css';\nimport SelectableIcons from '../selectable-icons-component/SelectableIcons';\n\nclass Layout extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            image: null,\n            ref: null,\n            showColumn: false\n        }\n    }\n\n    displayColumn(item) {\n        this.setState({ showColumn: !this.state.showColumn, image: item }, () => {\n            if (this.props.collectionName && this.state.showColumn === false) {\n                this.props.updateFaves();\n            }\n        })\n    }\n\n    scrollToImage(newRef) {\n        this.setState({ref : newRef.current}, () => {\n            this.state.ref.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        })\n    }\n\n    render() {\n\n        let images = (!this.props.isFaveCollection) ? this.props.allImageData : this.props.faveImageData;\n        const collectionName = this.props.collectionName;\n        const updateFaves = this.props.updateFaves;\n\n        if (!this.props.isLoaded) {\n            return <div>Loading... {this.props.isLoaded}</div>\n        } else if (this.props.isFaveCollection && !this.props.faveImageData) {\n            return <div>No favorite images</div>\n        } else {\n            return (\n                <div className={this.state.showColumn? 'column' : 'grid'}>\n                    <ul>\n                        {images.map((image, index) => {\n                            const newRef = React.createRef();\n                            return (\n                                <li\n                                    id={index}\n                                    key={index}\n                                    ref={newRef}\n                                    onClick={() => {this.displayColumn(image); this.scrollToImage(newRef);}}\n                                >\n                                    <SelectableIcons\n                                        source={image}\n                                        faveImageData={this.props.faveImageData}\n                                        collectionName={collectionName}\n                                        updateFaves={updateFaves}\n                                        showColumn={this.state.showColumn}\n                                    />\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Layout\n","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nclass ChooseFave extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            nameValue: '',\n            submissionSuccess: ''\n        };\n    }\n\n    handleChange = (event) => {\n        if (event.target.name !== 'Select a folder') {\n            this.setState({\n                nameValue: event.target.value\n            })\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.nameValue !== '' && this.state.nameValue !== 'Select a folder') {\n            this.props.loadFaveCollection(this.state.nameValue);\n            this.goToFaves();\n        }\n    }\n\n    // If account selection is successful, go to favorites\n    goToFaves() {\n        this.props.history.push(\"/img/favorites\")\n    }\n\n    render () {\n\n        if ( this.props.signInClick ) {\n            return (\n                <div className=\"choose-fave form\">\n                    <h3>Choose a favorites collection</h3>\n                    <form onSubmit={this.handleSubmit}>\n                        <select onChange={this.handleChange}>\n                            {this.props.faveImageCollections.map((collection, key) => {\n                                return <option key={key} value={collection.name}>{collection.name}</option>;\n                            })}\n                        </select>\n                        <input type=\"submit\" value=\"Submit\"/>\n                    </form>\n                </div>\n                )\n        } else {\n            return (\n                <input type=\"submit\" value=\"Choose One\" onClick={() => {this.props.displayCreateCollectionComp(false)}}></input>\n            )\n        }\n    }\n}\n\nexport default withRouter(ChooseFave)\n","// const apiBaseUrl = 'http://localhost:3001/img'; // dev\nconst apiBaseUrl = 'https://meme-server2.herokuapp.com/img'; // prod\n\nconst UserService = {\n\n    addCollection: async function(collectionName) {\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                account: Math.floor(100000 + Math.random() * 900000)\n            })\n        }\n        const response = await fetch(apiBaseUrl + '/addCollection', requestOptions)\n        const json = await response.json();\n        return json;\n    },\n\n    getCollection: async function(name) {\n        const response = await fetch(apiBaseUrl + '/favorites/' + name)\n        const json = await response.json();\n        return json;\n    }\n}\n\nexport default UserService\n","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport UserService from '../../services/UserService';\n\nclass CreateFave extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            nameValue: '',\n            submissionSuccess: ''\n        };\n    }\n\n    handleChange = (event) => {\n        if (event.target.name === 'name') {\n            this.setState({\n                nameValue: event.target.value\n            })\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        UserService.addCollection(this.state.nameValue)\n            .then(result => { this.setState({ submissionSuccess: Boolean(result) }) });\n    }\n\n    // If new account creation is successful, go back home\n    goToFaves() {\n        this.props.history.push(\"/img\")\n    }\n\n    // Called after state change (see the handleSubmit setState call above)\n    componentDidUpdate() {\n        try {\n            if (this.state.submissionSuccess) {\n                this.props.loadFaveCollection(this.state.nameValue);\n                this.props.updateFaveCollectionsList();\n                this.goToFaves();\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    render() {\n\n        if ( this.props.createNewClick ) {\n            return (\n                <div className=\"create-fave form\">\n                    <h3>Create a new favorites folder</h3>\n                    <form onSubmit={this.handleSubmit}>\n                        <label htmlFor=\"name\">Add a name:\n                            <input type=\"text\" name=\"name\" onChange={this.handleChange}/>\n                        </label>\n                        <input type=\"submit\" value=\"Submit\"/>\n                    </form>\n                </div>\n            )\n        } else {\n            return (\n                <input type=\"submit\" value=\"Create New\" onClick={() => {this.props.displayCreateCollectionComp(true)}}></input>\n            )\n        }\n\n    }\n}\n\nexport default withRouter(CreateFave)\n","import React, { Component } from 'react';\n\nimport ChooseFave from '../choose-favorites-collection-component/ChooseFaveCollection';\nimport CreateFave from '../create-favorites-collection-component/CreateFaveCollection';\nimport './FaveSelectionContainer.css';\n\nclass FaveSelectionContainer extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            showCreateCollectionComp: false\n        }\n    }\n\n    /*\n     * Gets event passed back up from child components.\n     * This call comes from navigation.\n     */\n    displayCreateCollectionComp = (passedValue) => {\n        this.setState({showCreateCollectionComp : passedValue});\n    }\n\n    /*\n     * Gets called after state change.\n     * This call comes from the component itself.\n     */\n    componentDidMount = () => {\n        this.setState({showCreateCollectionComp : this.props.createNewClick});\n    }\n\n    render() {\n\n        const {\n            faveImageCollections,\n            loadFaveCollection,\n            updateFaveCollectionsList\n        } = this.props;\n\n        if (this.state.showCreateCollectionComp) {\n            return (\n                <React.Fragment>\n                    <div className=\"fave-selection-container\">\n                        <ChooseFave\n                            signInClick={false}\n                            faveImageCollections={faveImageCollections}\n                            displayCreateCollectionComp={this.displayCreateCollectionComp}>\n                        </ChooseFave>\n                        <CreateFave\n                            createNewClick={true}\n                            loadFaveCollection={loadFaveCollection}\n                            updateFaveCollectionsList={updateFaveCollectionsList}>\n                        </CreateFave>\n                    </div>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <div className=\"fave-selection-container\">\n                        <CreateFave\n                            createNewClick={false}\n                            displayCreateCollectionComp={this.displayCreateCollectionComp}>\n                        </CreateFave>\n                        <ChooseFave\n                            signInClick={true}\n                            faveImageCollections={faveImageCollections}\n                            loadFaveCollection={loadFaveCollection}>\n                        </ChooseFave>\n                    </div>\n                </React.Fragment>\n            )\n        }\n    }\n}\n\nexport default FaveSelectionContainer\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport Layout from '../layout-component/Layout';\nimport FaveSelectionContainer from '../fave-selection-container-component/FaveSelectionContainer';\nimport './Navigation.css';\n\n\nclass Navigation extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n           showFaves : true,\n           showMenu : false\n        }\n    }\n\n    displayMenu = () => {\n        this.setState({showMenu : !this.state.showMenu})\n    }\n\n    render() {\n\n        const {\n          allImageData,\n          faveImageData,\n          faveImageCollections,\n          isLoaded,\n          isFaveCollection,\n          createNewClick,\n          collectionName,\n          updateFaves,\n          loadFaveCollection,\n          updateFaveCollectionsList\n        } = this.props;\n\n        if (this.props.collectionName !== '') {\n            return (\n              <Router>\n                  <div className=\"navigation\" onClick={() => {this.displayMenu()}}>\n                      <h1>img</h1>\n                      <ul className={this.state.showMenu ? 'show' : 'hide'}>\n                          <li>\n                              <Link to=\"/img\" onClick={() => {this.props.updateFaves()}}>All Memes</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/img/create-faves\">Start a Collection</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/img/view-faves\">Choose a Fave Collection</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/img/favorites\" onClick={() => {this.props.updateFaves()}}>Fave Memes</Link>\n                          </li>\n                      </ul>\n                      <button><span>|</span><span>|</span><span>|</span></button>\n                  </div>\n\n                    <Switch>\n                        <Route exact path=\"/img\"\n                            component={() =>\n                                <Layout\n                                    allImageData={allImageData}\n                                    faveImageData={faveImageData}\n                                    isLoaded={isLoaded}\n                                    isFaveCollection={!isFaveCollection}\n                                    collectionName={collectionName}\n                                    updateFaves={updateFaves}\n                                />\n                            } />\n                        <Route path=\"/img/create-faves\"\n                            render={() => {\n                                return (\n                                    this.props.isLoaded ?\n                                    <FaveSelectionContainer\n                                        faveImageCollections={faveImageCollections}\n                                        createNewClick={createNewClick}\n                                        loadFaveCollection={loadFaveCollection}\n                                        updateFaveCollectionsList={updateFaveCollectionsList}\n                                    /> :\n                                    <Redirect to=\"/img\"/>\n                                )\n                            }}\n                            />\n                        <Route path=\"/img/view-faves\"\n                            component={() =>\n                                <FaveSelectionContainer\n                                    faveImageCollections={faveImageCollections}\n                                    loadFaveCollection={loadFaveCollection}\n                                    updateFaveCollectionsList={updateFaveCollectionsList}\n                                />\n                            } />\n                        <Route path=\"/img/favorites\"\n                            component={() =>\n                                <Layout\n                                    faveImageData={faveImageData}\n                                    isLoaded={isLoaded}\n                                    isFaveCollection={isFaveCollection}\n                                    collectionName={collectionName}\n                                    updateFaves={updateFaves}\n                                />\n                            } />\n                        {/* <Route component={NoMatch} /> */}\n                    </Switch>\n\n                </Router>\n            )\n        } else {\n            return (\n              <Router>\n                <div className=\"navigation\" onClick={() => {this.displayMenu()}}>\n                  <h1>img</h1>\n                    <ul className={this.state.showMenu ? 'show' : 'hide'}>\n                        <li>\n                            <Link to=\"/img\">All Memes</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/img/create-faves\">Start a Collection</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/img/view-faves\">Choose a Fave Collection</Link>\n                        </li>\n                    </ul>\n                    <button><span>|</span><span>|</span><span>|</span></button>\n                </div>\n\n                <Switch>\n                    <Route exact path=\"/img\"\n                        component={() =>\n                            <Layout\n                                allImageData={allImageData}\n                                faveImageData={faveImageData}\n                                isLoaded={isLoaded}\n                                collectionName={collectionName}\n                            />\n                        } />\n                    <Route path=\"/img/create-faves\"\n                        render={() => {\n                            return (\n                                this.props.isLoaded ?\n                                <FaveSelectionContainer\n                                    faveImageCollections={faveImageCollections}\n                                    createNewClick={createNewClick}\n                                    loadFaveCollection={loadFaveCollection}\n                                    updateFaveCollectionsList={updateFaveCollectionsList}\n                                /> :\n                                <Layout\n                                    allImageData={allImageData}\n                                    faveImageData={faveImageData}\n                                    isLoaded={isLoaded}\n                                    collectionName={collectionName}\n                                />\n                            )\n                        }}\n                    />\n                    <Route path=\"/img/view-faves\"\n                        component={() =>\n                            <FaveSelectionContainer\n                                faveImageCollections={faveImageCollections}\n                                loadFaveCollection={loadFaveCollection}\n                                updateFaveCollectionsList={updateFaveCollectionsList}\n                            />\n                        } />\n                    {/* <Route component={NoMatch} /> */}\n                </Switch>\n\n            </Router>\n            )\n        }\n    }\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\n\nimport Navigation from '../navigation-component/Navigation';\nimport UserService from '../../services/UserService';\nimport ImageService from '../../services/ImageService';\n\nclass Main extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            allImageData: [],\n            faveImageData: [],\n            faveImageCollections: [],\n            isLoaded: false,\n            isFaveCollection: true,\n            createNewClick: true,\n            hasFaves: false,\n            collectionName: ''\n        }\n    }\n\n    updateFaves = () => {\n        this.getFaves(this.state.collectionName);\n    }\n\n    loadFaveCollection = (collection) => {\n        this.setState({collectionName: collection}, () => {\n            this.getFaves(this.state.collectionName);\n        })\n    }\n\n    getFaves = (collection) => {\n        UserService.getCollection(collection)\n            .then(result => { this.setState({\n                faveImageData: result[0].images\n            })});\n    }\n\n    updateFaveCollectionsList = () => {\n        ImageService.getFaveCollections()\n            .then(result => this.setState({\n                isLoaded: true,\n                faveImageCollections: result\n            }));\n    }\n\n    // Gets called after first render\n    componentDidMount() {\n        // Get all images\n        ImageService.getAllImages()\n            .then(result => {\n                this.setState({\n                    allImageData: result\n                })\n            });\n\n         // Get fave image collections\n        this.updateFaveCollectionsList();\n    }\n\n    render() {\n\n        const {\n            allImageData,\n            faveImageData,\n            faveImageCollections,\n            isLoaded,\n            isFaveCollection,\n            createNewClick,\n            collectionName,\n        } = this.state;\n\n            return (\n                <div className=\"main\">\n                    <Navigation\n                        allImageData={allImageData}\n                        faveImageData={faveImageData}\n                        faveImageCollections={faveImageCollections}\n                        isLoaded={isLoaded}\n                        isFaveCollection={isFaveCollection}\n                        createNewClick={createNewClick}\n                        collectionName={collectionName}\n                        loadFaveCollection={this.loadFaveCollection}\n                        updateFaves={this.updateFaves}\n                        updateFaveCollectionsList={this.updateFaveCollectionsList}/>\n                </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport Main from './components/main-container-component/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}