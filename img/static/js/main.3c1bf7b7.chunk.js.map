{"version":3,"sources":["components/single-image-component/SingleImage.js","services/ImageService.js","components/selectable-icons-component/SelectableIcons.js","components/layout-component/Layout.js","components/choose-favorites-collection-component/ChooseFaveCollection.js","services/UserService.js","components/create-favorites-collection-component/CreateFaveCollection.js","components/fave-selection-container-component/FaveSelectionContainer.js","components/navigation-component/Navigation.js","components/main-container-component/Main.js","App.js","serviceWorker.js","index.js"],"names":["SingleImage","props","src","source","url","alt","ImageService","getAllImages","a","fetch","response","json","getFaveCollections","addToFaveImages","collectionName","imageId","imageUrl","method","headers","body","JSON","stringify","name","_id","removeFromFaveImages","then","result","console","log","catch","e","error","SelectableImage","toggleClass","event","currentState","state","favorited","setState","showColumn","stopPropagation","updateFaves","this","faveImageData","faveImageCheck","map","image","indexOf","Fragment","className","onClick","Component","Layout","ref","item","newRef","current","scrollIntoView","behavior","block","images","isFaveCollection","allImageData","isLoaded","index","React","createRef","id","key","displayColumn","scrollToImage","ChooseFave","handleChange","target","nameValue","value","handleSubmit","preventDefault","loadFaveCollection","goToFaves","submissionSuccess","history","push","signInClick","onSubmit","onChange","faveImageCollections","collection","type","displayJoinNow","withRouter","UserService","addCollection","account","Math","floor","random","getCollection","CreateFave","ok","updateFaveCollectionsList","createNewClick","htmlFor","FaveSelectionContainer","passedValue","showJoinNow","componentDidMount","Navigation","displayMenu","showMenu","showFaves","to","exact","path","component","render","Main","getFaves","mongoData","hasFaves","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3c1bf7b7.chunk.js","sourcesContent":["import React from 'react';\n\nconst SingleImage = (props) => {\n\n    return (\n        <div>\n            <img src={props.source.url} alt={props.source.alt}></img>\n        </div>\n    );\n}\n\nexport default SingleImage\n","\nconst ImageService = {\n\n    // Get all images\n    getAllImages: async function() {\n        const response = await fetch(\"https://meme-server.herokuapp.com/img\");\n        const json = await response.json();\n        return json;\n    },\n\n     // Get fave image collections\n    getFaveCollections: async function() {\n        const response = await fetch(\"https://meme-server.herokuapp.com/img/fave-collections\");\n        const json = await response.json();\n        return json;\n    },\n\n    addToFaveImages: function(collectionName, imageId, imageUrl) {\n        fetch('https://meme-server.herokuapp.com/img/add-to-favorites', {\n        // fetch('http://localhost:3001/add-to-favorites', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId,\n                url: imageUrl,\n                alt: ''\n            })\n        })\n    },\n\n    removeFromFaveImages: function(collectionName, imageId) {\n        fetch('https://meme-server.herokuapp.com/img/remove-from-favorites/' + collectionName + '/' + imageId, {\n        // fetch('http://localhost:3001/remove-from-favorites/' + collectionName + '/' + imageId, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: collectionName,\n                _id: imageId\n            })\n        }).then(result => {\n            console.log(\"result\", result)\n        })\n        .catch(e => console.error(e));\n    }\n}\n\nexport default ImageService\n","import React, { Component } from 'react';\n\nimport SingleImage from '../single-image-component/SingleImage';\nimport './SelectableIcons.css';\nimport ImageService from '../../services/ImageService';\n\nclass SelectableImage extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            favorited: false\n        };\n    }\n\n    toggleClass = (event) => {\n        const currentState = this.state.favorited;\n        this.setState({ favorited: !currentState });\n        if (this.state.favorited !== true) {\n            ImageService.addToFaveImages(this.props.collectionName, this.props.source._id, this.props.source.url);\n            if (this.props.showColumn) {\n                event.stopPropagation();\n            } else {\n                this.props.updateFaves();\n            }\n        } else {\n            ImageService.removeFromFaveImages(this.props.collectionName, this.props.source._id);\n            if (this.props.showColumn) {\n                event.stopPropagation();\n            } else {\n                this.props.updateFaves();\n            }\n        }\n    };\n\n    componentDidMount() {\n        if (this.props.faveImageData) {\n            const faveImageCheck = (this.props.faveImageData.map(function(image) {\n                return image._id;\n            }).indexOf(this.props.source._id) !== -1);\n            this.setState({\n                favorited: faveImageCheck\n            })\n        }\n    }\n\n    render() {\n\n        if (this.props.collectionName && this.props.showColumn) {\n            return (\n                <React.Fragment>\n                    <SingleImage source={this.props.source}/>\n                    <i className={(this.state.favorited === true) ? 'fas fa-heart' : 'far fa-heart'}\n                    onClick={this.toggleClass}></i>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <SingleImage source={this.props.source}/>\n                </React.Fragment>\n            )\n        }\n    }\n}\n\nexport default SelectableImage\n","import React, { Component } from 'react';\n\nimport './Layout.css';\nimport SelectableIcons from '../selectable-icons-component/SelectableIcons';\n\nclass Layout extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            image: null,\n            ref: null,\n            showColumn: false\n        }\n    }\n\n    displayColumn(item) {\n        this.setState({ showColumn: !this.state.showColumn, image: item }, () => {\n            if (this.props.collectionName && this.state.showColumn === false) {\n                this.props.updateFaves();\n            }\n        })\n    }\n\n    scrollToImage(newRef) {\n        this.setState({ref : newRef.current}, () => {\n            this.state.ref.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        })\n    }\n\n    render() {\n\n        let images = (!this.props.isFaveCollection) ? this.props.allImageData : this.props.faveImageData;\n        const collectionName = this.props.collectionName;\n        const updateFaves = this.props.updateFaves;\n        console.log(!this.props.isFaveCollection && !this.props.faveImageData)\n\n        if (!this.props.isLoaded) {\n            return <div>Loading... {this.props.isLoaded}</div>\n        } else if (this.props.isFaveCollection && !this.props.faveImageData) {\n            return <div>No favorite images</div>\n        } else {\n            return (\n                <div className={this.state.showColumn? 'column' : 'grid'}>\n                    <ul>\n                        {images.map((image, index) => {\n                            const newRef = React.createRef();\n                            return (\n                                <li\n                                    id={index}\n                                    key={index}\n                                    ref={newRef}\n                                    onClick={() => {this.displayColumn(image); this.scrollToImage(newRef);}}\n                                >\n                                    <SelectableIcons\n                                        source={image}\n                                        faveImageData={this.props.faveImageData}\n                                        collectionName={collectionName}\n                                        updateFaves={updateFaves}\n                                        showColumn={this.state.showColumn}\n                                    />\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Layout\n","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nclass ChooseFave extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            nameValue: '',\n            submissionSuccess: ''\n        };\n    }\n\n    handleChange = (event) => {\n        if (event.target.name !== 'Select a folder') {\n            this.setState({\n                nameValue: event.target.value\n            })\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.nameValue !== '' && this.state.nameValue !== 'Select a folder') {\n            this.props.loadFaveCollection(this.state.nameValue);\n            this.goToFaves();\n        }\n    }\n\n    // If account selection is successful, go to favorites\n    goToFaves() {\n        this.props.history.push(\"/img/favorites\")\n    }\n\n    render () {\n\n        if ( this.props.signInClick ) {\n            return (\n                <div className=\"choose-fave form\">\n                    <h3>Choose a favorites collection</h3>\n                    <form onSubmit={this.handleSubmit}>\n                        <select onChange={this.handleChange}>\n                            {this.props.faveImageCollections.map((collection, key) => {\n                                return <option key={key} value={collection.name}>{collection.name}</option>;\n                            })}\n                        </select>\n                        <input type=\"submit\" value=\"Submit\"/>\n                    </form>\n                </div>\n                )\n        } else {\n            return (\n                <input type=\"submit\" value=\"Choose One\" onClick={() => {this.props.displayJoinNow(false)}}></input>\n            )\n        }\n    }\n}\n\nexport default withRouter(ChooseFave)\n","\nconst UserService = {\n\n    addCollection: function(name) {\n        return fetch('https://meme-server.herokuapp.com/img/add-collection', {\n        // return fetch('http://localhost:3001/add-collection', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: name,\n                account: Math.floor(100000 + Math.random() * 900000)\n            })\n        })\n\n    },\n\n    getCollection: async function(name) {\n        const response = await fetch('https://meme-server.herokuapp.com/img/get-collection/' + name)\n        // const response = await fetch('http://localhost:3001/get-collection/' + name);\n        const json = await response.json();\n        return json;\n    }\n}\n\nexport default UserService\n","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport UserService from '../../services/UserService';\n\nclass CreateFave extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            nameValue: '',\n            submissionSuccess: ''\n        };\n    }\n\n    handleChange = (event) => {\n        if (event.target.name === 'name') {\n            this.setState({\n                nameValue: event.target.value\n            })\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        UserService.addCollection(this.state.nameValue)\n            .then(result => {this.setState({submissionSuccess: result})});\n    }\n\n    // If new account creation is successful, go back home\n    goToFaves() {\n        this.props.history.push(\"/img\")\n    }\n\n    // Called after state change (see the handleSubmit setState call above)\n    componentDidUpdate() {\n        try {\n            if (this.state.submissionSuccess.ok) {\n                this.props.loadFaveCollection(this.state.nameValue);\n                this.props.updateFaveCollectionsList();\n                this.goToFaves();\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    render() {\n\n        if ( this.props.createNewClick ) {\n            return (\n                <div className=\"create-fave form\">\n                    <h3>Create a new favorites folder</h3>\n                    <form onSubmit={this.handleSubmit}>\n                        <label htmlFor=\"name\">Add a name:\n                            <input type=\"text\" name=\"name\" onChange={this.handleChange}/>\n                        </label>\n                        <input type=\"submit\" value=\"Submit\"/>\n                    </form>\n                </div>\n            )\n        } else {\n            return (\n                <input type=\"submit\" value=\"Create New\" onClick={() => {this.props.displayJoinNow(true)}}></input>\n            )\n        }\n\n    }\n}\n\nexport default withRouter(CreateFave)\n","import React, { Component } from 'react';\n\nimport ChooseFave from '../choose-favorites-collection-component/ChooseFaveCollection';\nimport CreateFave from '../create-favorites-collection-component/CreateFaveCollection';\nimport './FaveSelectionContainer.css';\n\nclass FaveSelectionContainer extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            showJoinNow: false\n        }\n    }\n\n    /*\n     * Gets event passed back up from child components.\n     * This call comes from navigation.\n     */\n    displayJoinNow = (passedValue) => {\n        this.setState({showJoinNow : passedValue});\n    }\n\n    /*\n     * Gets called after state change.\n     * This call comes from the component itself.\n     */\n    componentDidMount = () => {\n        this.setState({showJoinNow : this.props.createNewClick});\n    }\n\n    render() {\n\n        const {\n            faveImageCollections,\n            loadFaveCollection,\n            updateFaveCollectionsList\n        } = this.props;\n\n        if (this.state.showJoinNow) {\n            return (\n                <React.Fragment>\n                    <div className=\"fave-selection-container\">\n                        <ChooseFave\n                            signInClick={false}\n                            faveImageCollections={faveImageCollections}\n                            displayJoinNow={this.displayJoinNow}>\n                        </ChooseFave>\n                        <CreateFave\n                            createNewClick={true}\n                            loadFaveCollection={loadFaveCollection}\n                            updateFaveCollectionsList={updateFaveCollectionsList}>\n                        </CreateFave>\n                    </div>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <React.Fragment>\n                    <div className=\"fave-selection-container\">\n                        <CreateFave\n                            createNewClick={false}\n                            displayJoinNow={this.displayJoinNow}>\n                        </CreateFave>\n                        <ChooseFave\n                            signInClick={true}\n                            faveImageCollections={faveImageCollections}\n                            loadFaveCollection={loadFaveCollection}>\n                        </ChooseFave>\n                    </div>\n                </React.Fragment>\n            )\n        }\n    }\n}\n\nexport default FaveSelectionContainer\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport Layout from '../layout-component/Layout';\nimport FaveSelectionContainer from '../fave-selection-container-component/FaveSelectionContainer';\nimport './Navigation.css';\n\n\nclass Navigation extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n           showFaves : true,\n           showMenu : false\n        }\n    }\n\n    displayMenu = () => {\n        this.setState({showMenu : !this.state.showMenu})\n    }\n\n    render() {\n\n        const {\n          allImageData,\n          faveImageData,\n          faveImageCollections,\n          isLoaded,\n          isFaveCollection,\n          createNewClick,\n          collectionName,\n          updateFaves,\n          loadFaveCollection,\n          updateFaveCollectionsList\n        } = this.props;\n\n        if (this.props.collectionName !== '') {\n            return (\n              <Router>\n                  <div className=\"navigation\" onClick={() => {this.displayMenu()}}>\n                      <h1>img</h1>\n                      <ul className={this.state.showMenu ? 'show' : 'hide'}>\n                          <li>\n                              <Link to=\"/img\" onClick={() => {this.props.updateFaves()}}>All Memes</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/img/create-faves\">Start a Collection</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/img/view-faves\">Choose a Fave Collection</Link>\n                          </li>\n                          <li>\n                              <Link to=\"/img/favorites\" onClick={() => {this.props.updateFaves()}}>Fave Memes</Link>\n                          </li>\n                      </ul>\n                      <button><span>|</span><span>|</span><span>|</span></button>\n                  </div>\n\n                    <Switch>\n                        <Route exact path=\"/img\"\n                            component={() =>\n                                <Layout\n                                    allImageData={allImageData}\n                                    faveImageData={faveImageData}\n                                    isLoaded={isLoaded}\n                                    isFaveCollection={!isFaveCollection}\n                                    collectionName={collectionName}\n                                    updateFaves={updateFaves}\n                                />\n                            } />\n                        <Route path=\"/img/create-faves\"\n                            render={() => {\n                                return (\n                                    this.props.isLoaded ?\n                                    <FaveSelectionContainer\n                                        faveImageCollections={faveImageCollections}\n                                        createNewClick={createNewClick}\n                                        loadFaveCollection={loadFaveCollection}\n                                        updateFaveCollectionsList={updateFaveCollectionsList}\n                                    /> :\n                                    <Redirect to=\"/img\"/>\n                                )\n                            }}\n                            />\n                        <Route path=\"/img/view-faves\"\n                            component={() =>\n                                <FaveSelectionContainer\n                                    faveImageCollections={faveImageCollections}\n                                    loadFaveCollection={loadFaveCollection}\n                                    updateFaveCollectionsList={updateFaveCollectionsList}\n                                />\n                            } />\n                        <Route path=\"/img/favorites\"\n                            component={() =>\n                                <Layout\n                                    faveImageData={faveImageData}\n                                    isLoaded={isLoaded}\n                                    isFaveCollection={isFaveCollection}\n                                    collectionName={collectionName}\n                                    updateFaves={updateFaves}\n                                />\n                            } />\n                        {/* <Route component={NoMatch} /> */}\n                    </Switch>\n\n                </Router>\n            )\n        } else {\n            return (\n              <Router>\n                <div className=\"navigation\" onClick={() => {this.displayMenu()}}>\n                  <h1>img</h1>\n                    <ul className={this.state.showMenu ? 'show' : 'hide'}>\n                        <li>\n                            <Link to=\"/img\">All Memes</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/img/create-faves\">Start a Collection</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/img/view-faves\">Choose a Fave Collection</Link>\n                        </li>\n                    </ul>\n                    <button><span>|</span><span>|</span><span>|</span></button>\n                </div>\n\n                <Switch>\n                    <Route exact path=\"/img\"\n                        component={() =>\n                            <Layout\n                                allImageData={allImageData}\n                                faveImageData={faveImageData}\n                                isLoaded={isLoaded}\n                                collectionName={collectionName}\n                            />\n                        } />\n                    <Route path=\"/img/create-faves\"\n                        render={() => {\n                            return (\n                                this.props.isLoaded ?\n                                <FaveSelectionContainer\n                                    faveImageCollections={faveImageCollections}\n                                    createNewClick={createNewClick}\n                                    loadFaveCollection={loadFaveCollection}\n                                    updateFaveCollectionsList={updateFaveCollectionsList}\n                                /> :\n                                <Layout\n                                    allImageData={allImageData}\n                                    faveImageData={faveImageData}\n                                    isLoaded={isLoaded}\n                                    collectionName={collectionName}\n                                />\n                            )\n                        }}\n                    />\n                    <Route path=\"/img/view-faves\"\n                        component={() =>\n                            <FaveSelectionContainer\n                                faveImageCollections={faveImageCollections}\n                                loadFaveCollection={loadFaveCollection}\n                                updateFaveCollectionsList={updateFaveCollectionsList}\n                            />\n                        } />\n                    {/* <Route component={NoMatch} /> */}\n                </Switch>\n\n            </Router>\n            )\n        }\n    }\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\n\nimport Navigation from '../navigation-component/Navigation';\nimport UserService from '../../services/UserService';\nimport ImageService from '../../services/ImageService';\n\nclass Main extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            allImageData: [],\n            faveImageData: [],\n            faveImageCollections: [],\n            isLoaded: false,\n            isFaveCollection: true,\n            createNewClick: true,\n            hasFaves: false,\n            collectionName: ''\n        }\n    }\n\n    updateFaves = () => {\n        this.getFaves(this.state.collectionName);\n    }\n\n    loadFaveCollection = (collection) => {\n        this.setState({collectionName: collection}, () => {\n            this.getFaves(this.state.collectionName);\n        })\n    }\n\n    getFaves = (collection) => {\n        UserService.getCollection(collection)\n            .then(result => {this.setState({faveImageData: result.images})});\n    }\n\n    updateFaveCollectionsList = () => {\n        console.log('test')\n        ImageService.getFaveCollections()\n            .then(result => this.setState({\n                isLoaded: true,\n                faveImageCollections: result.mongoData\n            }))\n    }\n\n    // Gets called after first render\n    componentDidMount() {\n\n        // Get all images\n        ImageService.getAllImages()\n            .then(result => {this.setState({ allImageData: result.mongoData})});\n\n         // Get fave image collections\n        this.updateFaveCollectionsList();\n    }\n\n    render() {\n\n        const {\n            allImageData,\n            faveImageData,\n            faveImageCollections,\n            isLoaded,\n            isFaveCollection,\n            createNewClick,\n            collectionName,\n        } = this.state;\n\n            return (\n                <div className=\"main\">\n                    <Navigation\n                        allImageData={allImageData}\n                        faveImageData={faveImageData}\n                        faveImageCollections={faveImageCollections}\n                        isLoaded={isLoaded}\n                        isFaveCollection={isFaveCollection}\n                        createNewClick={createNewClick}\n                        collectionName={collectionName}\n                        loadFaveCollection={this.loadFaveCollection}\n                        updateFaves={this.updateFaves}\n                        updateFaveCollectionsList={this.updateFaveCollectionsList}/>\n                </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport Main from './components/main-container-component/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}